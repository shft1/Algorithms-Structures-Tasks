"""
ID посылки - https://contest.yandex.ru/contest/22781/run-report/139400954/

-- ПРИНЦИП РАБОТЫ --

Вычисление значения арифметического выражения через постфиксную нотацию с использованием стека.

Арифметические операции выполняются над последними двумя добавленными элементами стека.

При проходе по выражению, числа добавляются на вершину стека, как только мы встречаем оператор,
происходит извлечение двух последних добавленных элементов из стека.

После этого выполняется операция над этими элементами, с порядком их добавления в стек.

Результат кладется на вершину стека и цикл повторяется.

После завершения цикла, результат арифметического выражения находится на вершине стека.

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --

В постфиксной нотации, арифметическая операция всегда выполняется на двух последних операндах.

Стек хранить порядок операнд, поэтому, при встрече с оператором,
мы всегда знаем к каким двум последним операндам относится это операция.

Поскольку задача гарантирует валидное арифметическое выражение, это означет,
что для любого оператора будут последние две операнды.

Следовательно алгоритм корректен.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --

Стек реализован на массиве.

Амортизированная сложность добавления одного элемента в конец массива ~ O(1).

При добавлении m элементов в массив, сложность будет О(m), где m - кол-во операнд в строке.

Сложность последовательного итерирования по строке будет O(n), где n - длина строки.

В худшем случае, когда у нас строка будет состоять только из операнд, наше m = n,
т.е. О(n + m) = O(n + n) = O(2n) = O(n)

Итоговая временная сложность - O(n)

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --

В худшем случае, когда у нас строка будет состоять только из операнд, нам придется их всех
сохранить в стек, пространственная сложность такой ситуации O(n), где n - длина строки.

Итоговая пространственная сложность - O(n)
"""

import sys


def solution():
    stack = []
    for var in sys.stdin.readline().rstrip().split():
        if var in {"+", "-", "*", "/"}:
            summit, pre_summit = stack.pop(), stack.pop()
            if var == "+":
                stack.append(pre_summit + summit)
            elif var == "-":
                stack.append(pre_summit - summit)
            elif var == "*":
                stack.append(pre_summit * summit)
            else:
                stack.append(pre_summit // summit)
        else:
            stack.append(int(var))
    return stack[-1]


if __name__ == "__main__":
    sys.stdout.write(f"{solution()}\n")
