"""
ID посылки - https://contest.yandex.ru/contest/25597/run-report/142409869/

Задача: Проверить, можно ли найти такие два подмножества, исходного множества чисел,
что их сумма будет одинаковой.

Примечание: Данный алгоритм является модификацией, в силу того, что хранит только предыдущую "строчку",
а не всю таблицу состояний динамики.

--- Принцип работы ---
- Сумма 2-х подмножеств = сумме всего множества
- Суммы этих подмножеств равны
=> Сумма подмножества = половине суммы от всего множества.
- Чтобы ответь на вопрос, нужно, из всего множества чисел, найти такое их подмножество,
сумма которого будет давать половину от суммы всего множества.
=> Таким образом, исходная задача сводится к классической задаче о рюкзаке.

--- Доказательства корректности ---
- Для решения задачи, используем сведение основной проблемы к задаче о рюкзаке.
  Получаем такую задачу: можно ли для данного мн-ва чисел собрать рюкзак весом = вес множества / 2
  Состояние динамики dp[i][w] - оптимальный вес рюкзака весом w для множества i.
- Если по окончанию работы алгоритма d[n][W] содержит вес, равный половине
  суммы всего множества, то мы можем сказать, что существуют такие два подмножества чисел,
  суммы которых равны.
=> Таким образом, алгоритм корректен. ■

--- Временная сложность ---
Создание "таблицы" = O(W), где W - сумма мн-ва / 2 = сумма мн-ва
Заполнение "таблицы" = O(N * W), где N - мощность мн-ва
=> Итоговая временная сложность = O(N * W)

--- Пространственная сложность ---
Хранение "таблицы" = O(W), где W - сумма мн-ва / 2 = сумма мн-ва
=> Итоговая пространственная сложность = O(W)
"""

import sys


def solution(n, nums):
    sumi = sum(nums)
    if sumi % 2 != 0:
        return "False"
    weight = sumi // 2
    curr = [0] * (weight + 1)
    prev = [0] * (weight + 1)
    for i in range(n):
        for w in range(1, weight + 1):
            if nums[i] <= w:
                curr[w] = max(nums[i] + prev[w - nums[i]], prev[w])
            else:
                curr[w] = prev[w]
        prev = curr.copy()
        curr = [0] * (weight + 1)
    return "True" if prev[w] == weight else "False"


def main():
    n = int(sys.stdin.readline().rstrip())
    nums = list(map(int, sys.stdin.readline().rstrip().split()))
    sys.stdout.write(solution(n, nums))


if __name__ == "__main__":
    main()
